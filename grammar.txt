var-assign : LET IDENTIFIER EQUALS expr

var-update : IDENTIFIER EQUALS expr

expr       : comp-expr ((AND | OR) comp-expr)*
           | AS (CONVOP:INT | CONVOP:FLOAT | CONVOP:STRING | CONVOP:BOOL)

comp-expr  : NOT comp-expr
           | arith-expr (== | != | >= | <= | < | >) arith-expr

arith-expr : term ((PLUS|MINUS) term)*

term       : factor ((MUL|DIV) factor)*

factor     : INT|FLOAT
           | PLUS|MINUS factor

power      : atom (POW factor)*

atom       : INT|FLOAT|IDENTIFIER
           | NULL
           | IDENTIFIER 
           | - > call-fn
           | - > var-update
           | return
           | var-assign
           | if-stat
           | while
           | use
           | LPAREN expr RPAREN

if-stat    : IF expr { ... }
           | ELSE IF expr { ... }
           | ELSE { ... }

while      : WHILE expr { ... }

create-fn  : FN IDENTIFIER(expr*)

call-fn    : IDENTIFIER(expr*)

use        : USE <IDENTIFIER>

return     : RETURN expr*